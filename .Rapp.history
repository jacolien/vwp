getCountData <- function(x, split_by, data=NULL, values=NULL, #
    incl_na=FALSE){#
    dat <- c()#
    if(is.null(data)){#
        dat <- data.frame(x=x)#
        if(is.null( names(split_by) ) ){#
            warning('Split_by is a not a named list. Names are given automatically.')#
            names(split_by) <- paste('V', 1:length(split_by), sep='')#
        }#
        for(i in names(split_by)){#
            dat[,i] <- split_by[[i]]#
        }#
    }else{#
        split_by <- unlist(split_by)#
        cn <- colnames(data)#
        if(! x %in% cn){#
            stop(sprintf('Column %s not found in data %s.', #
                deparse(substitute(x)),#
                deparse(substitute(data))))#
        }#
        el <- which(!split_by %in% cn)#
        if( length(el)> 0){#
            stop(sprintf('Column(s) %s not found in data %s.', #
                paste(split_by[el], collapse=', '),#
                deparse(substitute(data))))#
        }#
        dat <- data.frame( data[,c(x, split_by)], row.names=NULL)#
        names(dat)[names(dat)==x] <- 'x'#
    } #
#
    if(is.null(values)){#
        values <- sort(unique(dat$x))#
    }#
#
    out <- values#
    if(incl_na){#
        out <- c(out, NA)#
    }#
#
    split <- list()#
    if(length(split_by)>1){#
        split <-  as.list(dat[,colnames(dat)!='x'])#
    }else{#
        split <-  list(dat[,colnames(dat)!='x'])#
    }#
#
    # To avoid dropping levels, treat NA in predictors as category:#
    split <- lapply(split, function(x){factor(as.character(x), exclude="")})#
#
    ## make more efficient with dplyr or data.table#
    newd <- aggregate(dat$x, by=split, #
        function(x){unlist(countValues(x,values=values, incl_na=incl_na))})#
#
    ## Convert numeric split predictors back to numeric:#
    for(i in names(split)){#
        if(is.numeric(dat[,i])){#
            newd[,i] <- as.numeric(as.character(newd[,i]))#
        }#
    }#
    colnames(newd)[colnames(newd)=='x'] <- deparse(substitute(x))#
    colnames(newd) <- gsub('"','', colnames(newd))#
    return(newd)#
}
rep( rep( c('other','competitor', 'target'), 3), #
            c(184, 172, 144, 51, 264, 185, 127, 2, 371))
dat <- data.frame(#
    AOI = rep( rep( c('other','competitor', 'target'), 3), #
            c(184, 172, 144, 51, 264, 185, 127, 2, 371)),#
    Timestamp = rep(1:500, 3),#
    Subject = rep(1:3, 500) )
head(dat)
source("/Users/Jacolien/R Packages/vwp/R/getCountData.R")
dat <- data.frame(#
    Subject = rep(1:3, 500),#
    Timestamp = rep(1:500, 3),#
    AOI = rep( rep( c('other','competitor', 'target'), 3),
)
''
dat <- data.frame(#
    Subject = rep(1:3, 500),#
    Timestamp = rep(1:500, 3),#
    AOI = rep( rep( c('other','competitor', 'target'), 3), #
            c(184, 172, 144, 51, 264, 185, 127, 2, 371)) )
head(dat)
dat[sample(nrow(dat), size=15),] <- NA
head(dat)
dat <- data.frame(
Subject = rep(1:3, 500),
Timestamp = rep(1:500, 3),
AOI = rep( rep( c('other','competitor', 'target'), 3),
c(184, 172, 144, 51, 264, 185, 127, 2, 371)) )
dat[sample(nrow(dat), size=15),]$AOI <- NA
head(dat)
timeBins <- function(x, binsize, pos=.5){#
  return( ( floor( x / binsize )+ pos ) * binsize ) #
}
dat$Timebin <- timeBins(dat$Timestamp, 100)
c1 <- getCountData('AOI', data=dat, split_by=c('Subject', 'Timebin'))
getCountData <- function(x, split_by, data=NULL, values=NULL, #
    incl_na=FALSE){#
    dat <- c()#
    if(is.null(data)){#
        dat <- data.frame(x=x)#
        if(is.null( names(split_by) ) ){#
            warning('Split_by is a not a named list. Names are given automatically.')#
            names(split_by) <- paste('V', 1:length(split_by), sep='')#
        }#
        for(i in names(split_by)){#
            dat[,i] <- split_by[[i]]#
        }#
    }else{#
        split_by <- unlist(split_by)#
        cn <- colnames(data)#
        if(! x %in% cn){#
            stop(sprintf('Column %s not found in data %s.', #
                deparse(substitute(x)),#
                deparse(substitute(data))))#
        }#
        el <- which(!split_by %in% cn)#
        if( length(el)> 0){#
            stop(sprintf('Column(s) %s not found in data %s.', #
                paste(split_by[el], collapse=', '),#
                deparse(substitute(data))))#
        }#
        dat <- data.frame( data[,c(x, split_by)], row.names=NULL)#
        names(dat)[names(dat)==x] <- 'x'#
    } #
#
    if(is.null(values)){#
        values <- sort(unique(dat$x))#
    }#
#
    out <- values#
    if(incl_na){#
        out <- c(out, NA)#
    }#
#
    split <- list()#
    if(length(split_by)>1){#
        split <-  as.list(dat[,colnames(dat)!='x'])#
    }else{#
        split <-  list(dat[,colnames(dat)!='x'])#
    }#
#
    # To avoid dropping levels, treat NA in predictors as category:#
    split <- lapply(split, function(x){factor(as.character(x), exclude="")})#
#
    ## make more efficient with dplyr or data.table#
    newd <- aggregate(dat$x, by=split, #
        function(x){unlist(countValues(x,values=values, incl_na=incl_na))})#
#
    ## Convert numeric split predictors back to numeric:#
    for(i in names(split)){#
        if(is.numeric(dat[,i])){#
            newd[,i] <- as.numeric(as.character(newd[,i]))#
        }#
    }#
    colnames(newd)[colnames(newd)=='x'] <- deparse(substitute(x))#
    colnames(newd) <- gsub('"','', colnames(newd))#
    return(newd)#
}
countValues <- function(x, values, incl_na=FALSE){#
    counts <- factor(x, levels=values)#
    return( table(counts, #
        useNA=ifelse(incl_na==TRUE, "always", "no"), #
        dnn=list(deparse(substitute(x)))) )#
}
c1 <- getCountData('AOI', data=dat, split_by=c('Subject', 'Timebin'))
head(c1)
c1$prop <- c1$AOI[,'target'] / rowSums(c(c1$AOI[,'competitor'],c1$AOI[,'other']))
c1$prop <- c1$AOI[,'target'] / ( c1$AOI[,'competitor']+c1$AOI[,'other'])
head(c1)
c2 <- getCountData('AOI', data=dat, split_by=c('Subject', 'Timebin'),
values=c('target', 'distractor', 'competitor', 'other'), incl_na=TRUE)
head(c2)
setwd('~/R Packages/vwp/')#
#
library(devtools)#
#
devtools::document()#
devtools::load_all()
setwd('~/R Packages/vwp/')#
#
library(devtools)#
#
devtools::document()#
devtools::load_all()
setwd('~/R Packages/vwp/')#
#
library(devtools)#
#
devtools::document()#
devtools::load_all()
setwd('~/R Packages/vwp/')#
#
library(devtools)#
#
devtools::document()#
devtools::load_all()
help(getCountData)
setwd('~/R Packages/vwp/')#
#
library(devtools)#
#
devtools::document()#
devtools::load_all()
help(getCountData)
